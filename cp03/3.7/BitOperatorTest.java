package classes;

public class BitOperatorTest{

    public static void main(String[] args){
        /*
         * & 按位与，当两位同时为 1 时，才为 1。
         *
         *   00000101
         * & 00001001
         * ----------
         *   00000001
         * 
         * 将输出 1。
         */
        System.out.println(5 & 9);
        
        /*
         * & 按位或，当两位有一位为 1 时，返回 1。
         *
         *   00000101
         * | 00001001
         * ----------
         *   00001101
         * 
         * 将输出 13。
         */
        System.out.println(5 | 9);
        
        /*
         * ~ 按位取反，将操作数的每个位全部取反。
         * 负数在计算机里是以补码的形式存储的。
         *
         * -5 的原码
         *  10000000000000000000000000000101
         * -5 的反码（除了符号位取反）
         *  11111111111111111111111111111010
         * -5 的补码（反码 +1）
         *  11111111111111111111111111111011
         * 取反运算
         *  00000000000000000000000000000100
         *
         * 将输出 4。
         */
        System.out.println(~ -5);
        
        /*
         * ^ 按位异或，当两位相同为 0，不同为 1。
         *
         *   00000101
         * ^ 00001001
         * ----------
         *   00001100
         * 
         * 将输出 12。
         */
        System.out.println(5 ^ 9);

        /*
         * 左移，将操作数整体左移指定位数，右边空出来的以 0 补充。（左移几位，就是乘 2 的几次方。）
         * 
         * 5 左移 2 位
         *
         *     |00000101
         *   00|00010100
         * 
         * 结果是 20。
         *
         * -5 的补码（反码 +1）
         *
         *    |11111111111111111111111111111011
         *  11|11111111111111111111111111101100
         * 结果是 11111111111111111111111111101100 是一个负数
         * 其反码是 11111111111111111111111111101011
         * 其原码是 10000000000000000000000000010100
         *
         * 结果是 -20
         */
        System.out.println(5 << 2);
        System.out.println(-5 << 2);

        
        /*
         * 右移，分为 >> 和 >>>。 对于 >> 而言，将操作数整体右移指定位数，左边空出来的以 原来的符号位补充。
         * >>> 是无符号右移，左边空出来的总是以 0 补充。
         *
         * -5 >> 2:
         *
         * -5 的补码（反码 +1）
         *
         *            11111111111111111111111111111011|
         * 右移两位   11111111111111111111111111111110|11
         * 结果是   11111111111111111111111111111110  是一个负数
         * 其反码是     11111111111111111111111111111101
         * 其原码是     10000000000000000000000000000010
         *  
         * 结果是 -2。
         *
         *
         * -5 >>> 2:
         *
         * -5 的补码（反码 +1）
         *
         *            11111111111111111111111111111011|
         * 右移两位   00111111111111111111111111111110|11
         * 结果是   00111111111111111111111111111110  
         * 即： 1073741822 
         */
        System.out.println(-5 >> 2);
        System.out.println(-5 >>> 2);
        
    }
}
